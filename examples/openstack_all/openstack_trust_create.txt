usage: openstack trust create [-h] [-f {json,shell,table,value,yaml}]
                              [-c COLUMN] [--noindent] [--prefix PREFIX]
                              [--max-width <integer>] [--fit-width]
                              [--print-empty] --project <project> --role
                              <role> [--impersonate]
                              [--expiration <expiration>]
                              [--project-domain <project-domain>]
                              [--trustor-domain <trustor-domain>]
                              [--trustee-domain <trustee-domain>]
                              <trustor-user> <trustee-user>

Create new trust

positional arguments:
  <trustor-user>        User that is delegating authorization (name or ID)
  <trustee-user>        User that is assuming authorization (name or ID)

options:
  -h, --help            show this help message and exit
  --project <project>   Project being delegated (name or ID) (required)
  --role <role>         Roles to authorize (name or ID) (repeat option to set
                        multiple values, required)
  --impersonate         Tokens generated from the trust will represent
                        <trustor> (defaults to False)
  --expiration <expiration>
                        Sets an expiration date for the trust (format of YYYY-
                        mm-ddTHH:MM:SS)
  --project-domain <project-domain>
                        Domain the project belongs to (name or ID). This can
                        be used in case collisions between project names
                        exist.
  --trustor-domain <trustor-domain>
                        Domain that contains <trustor> (name or ID)
  --trustee-domain <trustee-domain>
                        Domain that contains <trustee> (name or ID)

output formatters:
  output formatter options

  -f {json,shell,table,value,yaml}, --format {json,shell,table,value,yaml}
                        the output format, defaults to table
  -c COLUMN, --column COLUMN
                        specify the column(s) to include, can be repeated to
                        show multiple columns

json formatter:
  --noindent            whether to disable indenting the JSON

shell formatter:
  a format a UNIX shell can parse (variable="value")

  --prefix PREFIX       add a prefix to all variable names

table formatter:
  --max-width <integer>
                        Maximum display width, <1 to disable. You can also use
                        the CLIFF_MAX_TERM_WIDTH environment variable, but the
                        parameter takes precedence.
  --fit-width           Fit the table to the display width. Implied if --max-
                        width greater than 0. Set the environment variable
                        CLIFF_FIT_WIDTH=1 to always enable
  --print-empty         Print empty table if there is no data to show.
Could not clean up: 'ClientManager' object has no attribute 'session'
